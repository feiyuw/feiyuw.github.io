<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[张裕的博客]]></title>
  <subtitle><![CDATA[大音希声，大象希行]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://feiyuw.github.io/"/>
  <updated>2014-08-11T06:38:09.066Z</updated>
  <id>http://feiyuw.github.io/</id>
  
  <author>
    <name><![CDATA[feiyuw]]></name>
    <email><![CDATA[feiyuw@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[书评：颠覆笑傲江湖、动物农场、伐清、大教堂与市集]]></title>
    <link href="http://feiyuw.github.io/2014/08/11/%E4%B9%A6%E8%AF%84%EF%BC%9A%E9%A2%A0%E8%A6%86%E7%AC%91%E5%82%B2%E6%B1%9F%E6%B9%96%E3%80%81%E5%8A%A8%E7%89%A9%E5%86%9C%E5%9C%BA%E3%80%81%E4%BC%90%E6%B8%85%E3%80%81%E5%A4%A7%E6%95%99%E5%A0%82%E4%B8%8E%E5%B8%82%E9%9B%86/"/>
    <id>http://feiyuw.github.io/2014/08/11/书评：颠覆笑傲江湖、动物农场、伐清、大教堂与市集/</id>
    <published>2014-08-11T01:46:27.000Z</published>
    <updated>2014-08-11T05:04:29.816Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
      <category term="读书" scheme="http://feiyuw.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="读书" scheme="http://feiyuw.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我家女儿三岁半]]></title>
    <link href="http://feiyuw.github.io/2014/08/11/%E6%88%91%E5%AE%B6%E5%A5%B3%E5%84%BF%E4%B8%89%E5%B2%81%E5%8D%8A/"/>
    <id>http://feiyuw.github.io/2014/08/11/我家女儿三岁半/</id>
    <published>2014-08-11T01:19:55.000Z</published>
    <updated>2014-08-11T06:37:10.810Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;女儿已经三岁半了，从老婆怀孕到她出生，再到学会走路，学会说话，去托班上学。这四年多的时间，随着女儿的加入，我们也改变了很多。</p>
<p>&emsp;&emsp;这里就简单记录一件小事吧，权当留作老来幸福的回忆。</p>
<p>&emsp;&emsp;昨天晚上到了睡觉的时间了，女儿跑过去关掉灯，然后趴在我旁边，过了几秒中，她对我说：“爸爸，我睡不着。”。我回答：“睡不着的话坐起来跟爸爸聊聊天吧。”</p>
<p>&emsp;&emsp;然后女儿给我出了个题：“爸爸，给我讲个故事吧？”，“什么故事？”，“大猩猩对付大灰狼的故事”。各位，如果你们碰到这个问题，你们会怎么讲？昨天我是这么编的：</p>
<p>&emsp;&emsp;话说在很久很久以前（故事都是这么开头的不是？其实这是为了给自己多点编故事的时间），那时候是中国的春秋战国时期（有点谱了），在当时的郑国这个地方，生活着一个小宝宝（基本上故事的主角都是小宝宝，当然后来有长大的）。小宝宝经常去家附近的森林里玩，在那里他有一个好朋友，是一只跟他差不多大的小猩猩，他们经常一起玩耍，一起捉迷藏（除了大灰狼，都出来了，后面就好编了）。</p>
<p>&emsp;&emsp;小宝宝和小猩猩慢慢地长大了，他们依然经常在一起玩耍，依然是好朋友，只是见面的次数比以前少了。</p>
<p>&emsp;&emsp;然而这个时候发生了一件事情（故事总得有转折的嘛），郑国开始打仗了，长大后的小宝宝，这个时候要称他为小伙子了。小伙子被抽壮丁抓走了，他们要到很远的地方去与秦国军队打仗（春秋战国时期嘛，当然战争是最容易想到的了）。</p>
<p>&emsp;&emsp;小伙子随着部队来到了郑国的边界，那里的郑国军队正和秦军激烈地战斗。但是他们的加入没有影响战争的走势，郑国还是失败了。小伙子连续跑了好几天，才从战场上逃出来。可这个时候他已经又累又饿，在一个树林里坐下后，一下就睡着了（编得还算圆吧？）。</p>
<p>&emsp;&emsp;也不知道过了多久，小伙子慢慢地醒过来了，心想这个时候怎么可以睡着了呢。他一转身，赫然发现旁边不远处躺着一条大灰狼，已经被打死了，在大灰狼的不远处，有一个巨大而熟悉的身影——那是大猩猩（故事的第一阶段编完了）。</p>
<p>&emsp;&emsp;原来大猩猩发现小伙子被抓走了，就一路跟了过来，正好碰到大灰狼想吃掉睡着的小伙子，大猩猩用他有力的拳头就把大灰狼给打趴下了。</p>
<p>&emsp;&emsp;按照我原先的打算，这个故事到这里就算结束了，这个时候女儿也安安静静地睡在那里，我以为她已经睡着了。可是，可能是看到我没有再讲了，女儿突然说了句：“爸爸，继续讲啊”。好吧，那我继续编。</p>
<p>&emsp;&emsp;小伙子和大猩猩一路躲避着追兵往家走（是不是有点像大兵小将？事实上这个时候我是在琢磨接下来说啥），他们经常隐藏在树林里，等晚上再出来赶路。两个人靠采野果和抓鱼为生，他们通常一个人去采野果，另一个就去抓鱼（是不是像两个人了而不是人和猩猩了？不好编啊）。</p>
<p>&emsp;&emsp;这一天，轮到大猩猩去采野果，小伙子去抓鱼，可是小伙子抓完鱼回来等了好久，还没有看到大猩猩，看来大猩猩多半遇到麻烦了。小伙子沿着树林边缘寻找，发现前面有一大队士兵押着很多大车在往前走，大车上装着很多一些木头笼子，里面关着老虎、犀牛等各种大型动物，当然还有大猩猩。</p>
<p>&emsp;&emsp;小伙子悄悄地跟在队伍后头，准备到晚上找机会救出大猩猩。到了晚上，队伍走到了一个峡谷的入口，他们在这里扎下营寨，把大车围了一圈，阻挡敌人和野兽的袭击。小伙子悄悄地摸到大车旁边，看到每个大木笼都被锁链牢牢地锁住了，小伙子需要找到钥匙才能把木笼打开。可能是天无绝人之路，带着木笼钥匙的那个士兵就睡在木笼的旁边不远处，他的钥匙耷拉在地上，发出阵阵地鼾声。小伙子蹑手蹑脚地走过去，偷偷拿走了钥匙，打开了大猩猩的木笼，然后他又打开了其它的木笼。等到士兵发现动物逃走的时候，他们已经跑出去很远了。</p>
<p>&emsp;&emsp;小伙子和大猩猩千辛万苦回到了家乡，可是家乡已经被秦军占领了，他们只能继续往山里面躲，沿途遇到其他的人和动物，最后，他们在深山里找到了一个盆地，在那里生活了下来（天坑，最近女儿看爸爸去哪儿比较多，这个容易理解）。</p>
<p>&emsp;&emsp;这是我第二次打算结束整个故事，然后女儿又来了一句：“爸爸，接下来怎么样了呢？”，能怎么样呢？接着往下编吧，她怎么还没睡着啊？</p>
<p>&emsp;&emsp;故事的第三段就是桃花源记，有一个渔夫误入桃花源（当然了，就是小伙子、大猩猩以及其他的村民一起逃进去的那个地方），看到这个地方的人们还保留着几百年前的衣着和习惯，才知道他们是躲避战争过来的。渔夫住了几天后告辞，沿途留下记号，报告官府，但是回来找的时候却怎么也找不到了。</p>
<p>&emsp;&emsp;第三段故事结束，回头看女儿已经睡着了。</p>
<p>&emsp;&emsp;最后给各位再出几个题（当然都是女儿给我出的）：</p>
<ul>
<li>小母鸡在大草原上下蛋</li>
<li>小母鸡在沙漠里下蛋</li>
<li>小蛇和大猩猩的故事</li>
</ul>
<p>&emsp;&emsp;期待你们的答案！</p>
]]></content>
    
    
      <category term="家庭" scheme="http://feiyuw.github.io/tags/%E5%AE%B6%E5%BA%AD/"/>
    
      <category term="女儿" scheme="http://feiyuw.github.io/tags/%E5%A5%B3%E5%84%BF/"/>
    
      <category term="家庭" scheme="http://feiyuw.github.io/categories/%E5%AE%B6%E5%BA%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于gitlab merge request的持续集成]]></title>
    <link href="http://feiyuw.github.io/2014/08/06/%E5%9F%BA%E4%BA%8Egitlab-merge-request%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://feiyuw.github.io/2014/08/06/基于gitlab-merge-request的持续集成/</id>
    <published>2014-08-06T06:30:41.000Z</published>
    <updated>2014-08-06T06:31:35.040Z</updated>
    <content type="html"><![CDATA[]]></content>
    
    
      <category term="持续集成" scheme="http://feiyuw.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="持续集成" scheme="http://feiyuw.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[工作在持续集成上]]></title>
    <link href="http://feiyuw.github.io/2014/08/06/%E5%B7%A5%E4%BD%9C%E5%9C%A8%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%B8%8A/"/>
    <id>http://feiyuw.github.io/2014/08/06/工作在持续集成上/</id>
    <published>2014-08-06T06:14:45.000Z</published>
    <updated>2014-08-11T06:35:53.983Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近这几年一直在与持续集成及其相关的工作打交道，包括我自己的日常工作，目前也在这个工作模式里面进行。这篇博客想通过一天的工作来聊一下这种工作模式，它的优点以及弊端。</p>
<h2 id="什么是持续集成">什么是持续集成</h2>
<p>&emsp;&emsp;摘录自Martin Fowler的<a href="http://www.martinfowler.com/articles/continuousIntegration.html" target="_blank" rel="external">大作</a>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>Continuous Integration <span class="keyword">is</span> a software development practice <span class="keyword">where</span> members <span class="keyword">of</span> a team integrate their 
work frequently, usually each person integrates <span class="keyword">at</span> least daily - leading <span class="keyword">to</span> multiple integrations 
per <span class="property">day</span>. Each integration <span class="keyword">is</span> verified <span class="keyword">by</span> an automated build (including test) <span class="keyword">to</span> detect integration 
errors <span class="keyword">as</span> quickly <span class="keyword">as</span> possible. Many teams find <span class="keyword">that</span> this approach leads <span class="keyword">to</span> significantly reduced 
integration problems <span class="keyword">and</span> allows a team <span class="keyword">to</span> develop cohesive software more rapidly. This article <span class="keyword">is</span> 
a quick overview <span class="keyword">of</span> Continuous Integration summarizing <span class="keyword">the</span> technique <span class="keyword">and</span> <span class="keyword">its</span> current usage.
</pre></td></tr></table></figure>

<p>&emsp;&emsp;简而言之，持续集成就是让项目团队中的每一个人都尽可能频繁地把他们的工作集成到产品中进行验证，获得反馈的一种工作模式。</p>
<h2 id="在持续集成中工作">在持续集成中工作</h2>
<p>&emsp;&emsp;在这里笔者描述一下一天的工作情况。笔者所在的团队很小，所做的工作以开发内部工具为主，采用gitlab来管理代码和issue，以及进行code review。</p>
<p>&emsp;&emsp;早上到公司，第一件事一般是打开邮箱，查看有没有新的code review请求发过来。如果有的话，会在打开对应的merge request，进行code review，gitlab会自动把这些review结果发送给其他人。处理完这些事情后，如果有未做完的issue，会接着昨天的工作继续开发。如果昨天的issue已经结束并通过review，则会在gitlab上找下一个优先级的issue，将它的assiner改成自己，然后为这个issue创建分支，开始在这个分支上进行开发。</p>
<p>&emsp;&emsp;通常情况下，上午的两三个小时时间主要用在code review和日常的交流回复上面，下午4：00前是主要的开发时间，在本地UT通过后，就会提交到gitlab上。然后创建一个merge request，这个时候CI系统会侦测到这次提交，并自动执行单元测试，代码静态分析等，如果其中一个测试失败，笔者会收到相关的邮件。然后就是修复这些问题，再次提交。</p>
<p>&emsp;&emsp;下班前的半个小时是组内的日常会议时间，主要是交流各自进度和遇到的问题。</p>
<p>&emsp;&emsp;如果所选的issue开发已经结束，并且通过CI系统测试，就会发一个code review的请求给组内其他同事，开启review环节。</p>
<p>&emsp;&emsp;如果有相关的issue在code review都已经结束，则会在gitlab上关闭merge request，这个时候代码会自动合并到master分支，并在5分钟以内被部署到生产环境上。</p>
<h3 id="工作在持续集成中的特点">工作在持续集成中的特点</h3>
<ol>
<li>源代码管理工具，如git，svn等</li>
<li>持续集成工具，如Jenkins</li>
<li>频繁地代码提交和测试</li>
<li>细颗粒度的issue管理，保证每一个issue的开发周期在一两天完成</li>
<li>流程自动化的code review</li>
<li>自动和频繁的代码合并和部署</li>
</ol>
<h2 id="持续集成的优与劣">持续集成的优与劣</h2>
<h3 id="优点">优点</h3>
<p>&emsp;&emsp;持续集成的优点是比较明显的，频繁的提交带来频繁地集成，把代码问题的暴露大大提前了，并且由于流程的自动化，让开发者更好地关注于开发本身。</p>
<p>&emsp;&emsp;对于较大的项目，或者开发者分散的项目，好的持续集成策略能够极大地降低沟通成本和集成成本。</p>
<h3 id="风险">风险</h3>
<p>&emsp;&emsp;采用持续集成需要维护的工具较多，至少包括源代码管理工具如git，持续集成工具如Jenkins，并且需要制定相应的规则保证每一个持续集成job都正确地工作。这中间需要较多地沟通和适应成本，对于一个开发频率不高的项目，这种做法性价比不高。</p>
<p>&emsp;&emsp;并不是有git和jenkins就可以称为持续集成的，要完整地搭建一套可工作的持续集成框架，需要研发测试等各个组织的努力，如果处理不好，可能适得其反。</p>
<h3 id="基于gitlab的持续集成策略">基于gitlab的持续集成策略</h3>
<p>&emsp;&emsp;下图是笔者所在团队基于gitlab的持续集成策略，这里面的测试只有一轮，集成也只有一轮，对于更复杂的多轮集成的情况，我们后面再谈。</p>
<p><img src="/images/dev_process.png" alt="gitlab dev process"></p>
<h2 id="多轮持续集成模型">多轮持续集成模型</h2>
<p>&emsp;&emsp;如果产品比较复杂，如通信产品，单靠单元测试显然不能满足需求，这个时候往往会有多轮测试，并且在整个产品集成前后都会有单独的测试被执行。以笔者所在公司为例，一个通信产品往往能分为平台和应用等几大块，对每一块来说，产品交付到客户手中至少需要经历：单元测试、基于真实设备或模拟器的功能测试（编包前）、编包测试、编包后的基本功能测试、包的回归测试、系统集成测试等这几个环节。两个环节间的联系有的是代码的版本，有的则是包的版本。而越到测试的后期，测试的成本就越高，测试周期也越长。理想的情况是每一个阶段的集成测试都可以自动的转入下一阶段，并根据时间、频率等具体情况来决定测试频率，一个开发人员的代码提交可以在整个流程中被自动追溯，而产品的质量也可以在整个流程中被度量和追溯。而整个流程也就类似下图的continuous delivery或者continuous deployment了。</p>
<p><img src="/images/continuous_delivery.jpg" alt="continuous delivery"></p>
]]></content>
    
    
      <category term="持续集成" scheme="http://feiyuw.github.io/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="持续集成" scheme="http://feiyuw.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[测试自动化方案的选择]]></title>
    <link href="http://feiyuw.github.io/2014/07/18/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://feiyuw.github.io/2014/07/18/测试自动化方案的选择/</id>
    <published>2014-07-18T09:08:38.000Z</published>
    <updated>2014-08-04T05:49:02.066Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;软件开发发展到今天，分工已经越来越细了，测试自动化也已成为很多组织所采用的重要测试手段。笔者这几年工作过的公司和组织，见过很多不同的开发和测试模式，以及很多的测试自动化解决方案，很多组织都花费了大量的时间进行测试自动化，但是真正取得良好效果的却不多。大部分的组织在这块都存在或这或那的问题。笔者希望在这里能够抛砖引玉，讨论一下测试自动化方案的选择问题。</p>
<h2 id="测试自动化是什么">测试自动化是什么</h2>
<p>&emsp;&emsp;什么是自动化测试？关于这个问题，我们可以找到很多的解答。百度百科上关于自动化测试的说明为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>一般是指软件测试的自动化，软件测试就是在预设条件下运行系统或应用程序，评估运行结果，预先条件应包括正常条件和异常条件。
自动化测试是把以人为驱动的测试行为转化为机器执行的一种过程。
通常，在设计了测试用例并通过评审之后，由测试人员根据测试用例中描述的规程一步步执行测试，得到实际结果与期望结果的比较。
在此过程中，为了节省人力、时间或硬件资源，提高测试效率，便引入了自动化测试的概念。
</pre></td></tr></table></figure>

<p>&emsp;&emsp;从这个说明中，我们可以提炼几个关键词：</p>
<ul>
<li>节省资源</li>
<li>提高效率</li>
</ul>
<p>&emsp;&emsp;但是只有这两个目的吗？测试自动化实际上扩展了我们传统手工测试的边界，比如并发测试，手工的模拟某些情况下是不现实的。另外引入测试自动化，解放了测试的人力，同时也给测试人员提出了新的要求，这反过来往往会影响到我们的组织结构和人员构成，而由于测试自动化的快速反馈的特点，也会影响我们的发布流程和策略，进而影响到整个软件开发流程。因此，笔者认为，测试自动化还有两个重要的目的：</p>
<ul>
<li>提高测试覆盖率</li>
<li>优化工作流程</li>
</ul>
<p>&emsp;&emsp;因此，这里笔者大胆地给出一个定义：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>测试自动化，是在希望优化工作流程，提高工作效率，节省资源的组织里面，在测试这类工作上面所做的改变。
通过引入自动化，不但提高了测试效率和测试覆盖率，也提高了整个软件开发流程的效率。
同时，自动化的引入，也进一步模糊了开发和测试的界限，使敏捷成为可能。
</pre></td></tr></table></figure>

<h2 id="什么时候引入测试自动化">什么时候引入测试自动化</h2>
<p>&emsp;&emsp;在Michael Feathers的大作《Working Effectively with Legacy Code》里面对于开发的方式有两种描述：</p>
<ol>
<li>edit and pray</li>
<li>cover and modify</li>
</ol>
<p>&emsp;&emsp;我们显然不希望选择第一种方式，然而事实是即便在全球顶尖的公司里面，还有相当数量的组织和团队采用这种工作方式。程序员在写完代码的时候不知道他们的代码能不能工作，他们寄希望于独立的测试团队来验证整个产品的功能，以保证交付的质量。在这样的组织里面，可能会有一定程度的单元测试和持续集成，但是TDD（测试驱动开发）这样的模式是一定没有推广起来的。同时由于测试的分离，两个独立的组织间的沟通也是一个问题，甚至还有冲突。</p>
<p>&emsp;&emsp;尽管敏捷已经提出很多年了，我们不得不承认，还有很多的组织在用瀑布模型来进行软件开发，还有很多的管理层坚持测试组织的独立性。因此，作为工作在一线的员工，笔者没有奢望影响到管理层的决策和这么多人的习惯。我们今天就以不同的开发模式和人员组成，来看看什么时候适合引入测试自动化，或者说要不要引入测试自动化。</p>
<h3 id="小团队，没有或很少的测试人员">小团队，没有或很少的测试人员</h3>
<p>&emsp;&emsp;如果是初创的小团队，笔者觉得没有必要有独立的测试职位，这不仅仅是从节约资金上考虑，同时也是为了让所有的开发人员有一种产品意识。经常地去测试自己的产品，才能帮助自己开发出好的产品来。这种情况下，测试的消耗就要求尽可能地小和快了。笔者认为对于比较小的相对独立的项目，充分地单元测试加上少量的手工测试就可以了。如果项目有依赖，或者属于某一个大系统的一个子集，那集成层面的功能性测试就非常必要了，而且当项目变大之后，相关的功能模块越来越多，单元测试往往会无法覆盖某些关键路径。这种情况下，就必须要有全自动化的测试，并且每次代码提交后，只要过了单元测试和编译都去执行它。不能因为人员少或者缺少相关的背景而忽略掉测试，无路项目大小，单元测试都是必须的，而如果可预见的系统功能较多，那自动化功能测试也是必要的。小团队在制定流程上的灵活性，使得他们很容易切换工作模式，这种时候尝试一下TDD或者BDD，将会是非常美妙的一件事情。一旦我们驾驭了TDD和BDD，那我们会发现交付产品不再是一个让人忐忑的事情。</p>
<h3 id="有独立的测试组织的团队">有独立的测试组织的团队</h3>
<p>&emsp;&emsp;这样的团队往往比较大了，或者属于流程比较规范的公司，国内很多外包公司都乐于这么做。当测试组织独立的时候，我们需要避免一种情况的发生，这种情况在笔者工作过的公司见过很多次。当项目初步启动的时候，测试团队往往不知道做什么，他们会利用这段时间阅读需求文档等，但事实上这个时候的需求文档往往会在今后经历很多的变化。而到了项目后期，测试团队的压力变得非常大，他们需要加班加点保证所有的功能都被测试覆盖，没有死角。</p>
<p>&emsp;&emsp;独立的测试组织需要避免上述问题的发生，他们就必须尽早地加入到开发流程中去。笔者认为，最合适的方式，就是以测试用例来验证功能的交付。比如说，第一阶段研发开始，第一个要实现的功能是一个登陆模块，那作为测试组织，必须要在代码开始前就和开发团队确定这个功能的验证用例。然后测试团队需要研究自动化测试策略，选择合适的工具构建测试用例，并且把测试用例和需求文档有机地结合起来。</p>
<p>&emsp;&emsp;笔者认为，独立的测试团队需要尽可能早地建立起来有效的测试框架。当开发开始的时候，测试用例就要同步开始编写了，并且当产品每日构建或者发布的时候就执行全部测试用例，并及时给予反馈。对于自动化测试的执行和反馈周期必须在24小时以内，整个过程必须全自动，并且对于这一类发现问题，测试和研发团队要达成共识，其修复优先级要高于新功能的开发。</p>
<p>&emsp;&emsp;对于测试团队来讲，这个过程中比较难的就是自动化用例的更新和反馈周期，这里需要测试框架的制定者有一定的经验，并经常更新框架和测试用例，对于测试用例的质量也有较高的要求，建议采用类似code review的方式评审用例和框架，并采用gitlab、gerrit等合作方式提高效率。</p>
<p>&emsp;&emsp;如果无法与研发在测试自动化执行和修复的流程上达成一致，就必须要修正策略，减少自动化测试投入，加强手工测试，降低自动化测试频率，如仅仅对研发认为的稳定版本进行测试等等，但一周至少要执行一次，如果连这个频率都保证不了，建议直接放弃自动化测试。</p>
<p>&emsp;&emsp;如果整个测试团队严重缺乏自动化测试或者开发经验，建议在选择自动化测试方案的时候慎重考虑，如果确定有足够的时间来培训团队，有强有力的自动化测试领导者，可以尝试，不然建议放弃。</p>
<h3 id="测试和开发混合的团队">测试和开发混合的团队</h3>
<p>&emsp;&emsp;选择测试和开发混合组建的团队，一般采用敏捷开发的模式，对于测试自动化的接受程度较高。因此对一般的产品和项目来说，测试自动化必然是一开始就要引入的。但是从另一个角度讲，这一类的组织形式也容易产生团队间的重复工作，浪费现象严重。因此建议对于这一类型的组织，在自动化测试框架和策略方面要做到不同团队间的一致，并且不同团队共享同一份测试框架代码。另外建议有相对独立的测试自动化评审团队来验收框架代码和用例，以保证质量。</p>
<p>&emsp;&emsp;对于这一类型的组织，测试用例间的耦合性必须消除，即便是以执行时间为代价。测试用例必须尽可能独立和简洁明了，执行频率需要在所有团队上统一，如每日一次，并且不能收到某个团队的干扰。对于自动化测试发现的问题，所有团队的分析必须及时、高效。</p>
<p>&emsp;&emsp;对于这一类型的组织，建议自动化测试在执行层面上统一，各个团队不去维护执行框架，但是测试用例、测试设备和结果的维护必须由各个团队自己负责。</p>
<p>&emsp;&emsp;建议定期有相应的执行和分析报告发出\（当然最好是自动的\），以保证各个团队的工作重心不发生偏移。</p>
<p>&emsp;&emsp;虽然建议在执行层面统一，但是不意味着需要有独立的自动化测试执行团队来承担这项工作，事实上应当避免出现这样的团队。有这样的团队虽然从管理上可以带来一定的简便，但是会影响分析和测试效率，更大的影响在于让开发团队出现依赖，不再认真维护他们的测试用例。</p>
<h3 id="测试外包的团队">测试外包的团队</h3>
<p>&emsp;&emsp;这类测试一般相对独立和明确，因此什么时候引入，要不要引入测试自动化基本是确定的，关键是可维护性要求较高。笔者工作中曾经遇到一个外包的产品，自动化测试的用例基本是一个模块一种方案，而且由于稳定性问题，验收的标准被定义为在20次连续的测试中有一次可以全部通过即为通过。当后来因为产品线的问题，这个产品取消外包后，接手的团队不得不重新设计自动化测试框架和方案，并把原来的测试用例逐个分析和翻译，耗费了大量的时间。</p>
<p>&emsp;&emsp;如果外包的团队和内部团队在一起工作，那和前面的几个方式的讨论没什么区别；如果外包的团队独立工作，或者属于不同的地区和国家，那尽可能将稳定的回归测试工作外包，并要求外包团队接近100%的测试自动化率，以避免风险。</p>
<h2 id="如何决定测试自动化方案">如何决定测试自动化方案</h2>
<p>&emsp;&emsp;前面我们谈了要不要引入测试自动化，以及什么时候引入测试自动化。接下来我们具体谈一下面对特定的项目，采用什么样的测试自动化方案比较合适。</p>
<h3 id="开发流程决定测试自动化方案">开发流程决定测试自动化方案</h3>
<p>&emsp;&emsp;不同的开发流程对测试自动化方案的选择往往具有决定意义。在选择自动化测试方案前，请先仔细考虑一下，在项目采用的开发流程中，你所采用的方案能否得到大家的支持，能否顺利推行。这里笔者举一个例子来说明。</p>
<p>&emsp;&emsp;笔者目前所在的公司是一个较大的通信企业，通信行业的测试设备极为昂贵，且维护的人力成本较高。对于公司里面的任何一个团队（500人以内）来讲，它都不太可能负责某一个产品线的整个环节，往往是其中的一部分，如操作系统，如通信应用等。在选择自动化测试方案的时候往往就有两种选项：</p>
<ol>
<li>利用真实的设备，搭建接近真实的测试环境，上下游的软件都尽可能地更上其它团队的最新开发进度，然后测试自己所交付的产品在这个环境上的质量。</li>
<li>除了自己的产品外，尽可能地用模拟器，测试尽可能地简单，只覆盖自己开发的部分。</li>
</ol>
<p>&emsp;&emsp;同样地对应与上述两种方案，他们所采用的测试工具也往往会出现分歧。第一种方案往往倾向于集成的测试工具，类似LoadRunner、QTP这样的；第二种方案倾向与轻量化的测试工具，往往采用脚本语言如Python、Bash来构建他们的测试集。而在执行层面上，第一种方案往往会有独立的测试团队和工程师来负责，第二种却不一定。同时第二种方案的执行频率要高于第一种。</p>
<p>&emsp;&emsp;那么什么样的团队会倾向于选择第一种方案呢？从笔者的观察来看，如果这个团队研发和测试界限比较明显，或者有较强的测试团队，特别是系统测试团队，开发流程接近瀑布多余敏捷，那他们通常会选择方案一。相反，则多数会选择方案二。</p>
<h3 id="项目特点决定测试自动化方案">项目特点决定测试自动化方案</h3>
<p>&emsp;&emsp;不存在普遍适用的测试自动化方案，比如，对于B/S应用，在功能测试方面，Selenium就是比RobotFramework更合适的选择。但如果测试的是windows桌面应用，那他们就不合适了。再比如，如果项目是做一个通信服务，那用Python这样的脚本语言自己构建测试框架往往更好。</p>
<h3 id="工程师特点决定测试自动化方案">工程师特点决定测试自动化方案</h3>
<p>&emsp;&emsp;采用工程师熟悉的语言和平台，可以更快地推广，并得到较高质量的自动化测试用例。而如果工程师普遍开发功底较薄，那采用标记语言或者模板语言就比采用一般编程语言更合适，这也就是为什么会出现像<a href="http://robotframework.org" target="_blank" rel="external">RobotFramework</a>这样的框架的原因。笔者见过一个项目，测试自动化采用C++语言编写，而且维护效率不低，原因就是这个团队所有的工程师都精通C++语言，这个时候推广Python或者标记语言可能阻力会更大。</p>
<h2 id="测试自动化的团队组成">测试自动化的团队组成</h2>
<p>&emsp;&emsp;很多组织（无论是小公司，还是跨国公司），很容易犯的错误就是忽视自动化测试核心团队的重要性，随意拼凑人员组成这个团队，如果项目旷日持久，其带来的浪费是相当惊人的。在笔者所在公司，就见过这样的例子，两三年之后，测试自动化用例和脚本出现大量的重复，整个测试自动化脚本库几无复用性可言，测试自动化的执行被限定在特定的机器上，环境配置被几千行冗余的Bash脚本所累，抽取和剥离需要耗费几千个小时甚至更多的人力。而且由于早期策略失误，框架扩展性差，造成测试覆盖率的严重不足，交付的产品质量满足不了客户需求。</p>
<p>&emsp;&emsp;一个测试自动化核心团队可以是虚拟的，也可以是具体的团队，但是规模不应该很大，十个人左右是比较理想的情况。他们不应该负责所有测试用例的编写和维护，而应该着重于测试自动化框架和提高测试自动化开发执行效率方面。这个团队的成员必须具有足够的开发背景，能写出高质量的代码，并且有一定的测试经验，能够针对项目和团队的特点制定合适的测试自动化方案。同时，他们也需要有一定的coaching能力，能够影响广大的测试和研发团队，让他们工作在同一个自动化测试框架中，并且尽可能地避免浪费。</p>
<h2 id="没有最好的方案，只有最合适的方案">没有最好的方案，只有最合适的方案</h2>
<p>&emsp;&emsp;软件开发一直在不断地向前演进，无论是技术，还是工作方式，每个十年都有翻天覆地地变化。我们必须不断地更新自己的经验库，经常审视目前的方案，不断地优化它，改进它，使它成为最适合我们的方案。因为永远没有那个方案是最好的方案，我们只是在寻找当前对我们来说最适合的方案。</p>
]]></content>
    
    
      <category term="TA" scheme="http://feiyuw.github.io/tags/TA/"/>
    
      <category term="测试自动化" scheme="http://feiyuw.github.io/categories/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[夏日厦门行]]></title>
    <link href="http://feiyuw.github.io/2014/07/14/%E5%8E%A6%E9%97%A8%E8%A1%8C/"/>
    <id>http://feiyuw.github.io/2014/07/14/厦门行/</id>
    <published>2014-07-14T07:37:53.000Z</published>
    <updated>2014-07-17T07:02:40.877Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;这次的旅行完全是临时起意，星期一突然产生了去厦门的想法，星期二定了火车票，买了旅行箱，星期三定下酒店，星期四就出发了。</p>
<p>&emsp;&emsp;关于旅行的目的同样是没有特别计划，关键点就两个：<strong>海滩</strong>、<strong>小吃</strong>。必须去的景点就一个：<strong>鼓浪屿</strong>。基本的宗旨是：</p>
<pre><code><span class="bullet">* </span>不赶时间
<span class="bullet">* </span>不凑热闹
<span class="bullet">* </span>不赶景点
<span class="bullet">* </span>不吃海鲜
</code></pre><p>&emsp;&emsp;先说一下整个行程，星期四早上6：30从家里出发，星期天晚上9：00到家，历时四天三晚。一家三口往返皆用动车，住宿都靠海边，总共花销3000左右，其中鼓浪屿一晚的住宿就有700多，不过还是比较值得的。</p>
<p>&emsp;&emsp;厦门七月初的天气很热了，最高温度在33～35’C左右，中午在外面已经有点受不了了，但是海水温度也上来了，可以下水游泳。天气热了，所以只带夏季的衣物和凉鞋就可以了，而三岁的女儿受《爸爸去哪儿》的影响，对海边非常向往，玩沙玩水的玩具就是必带的了。按照我最初的想法，女儿在海边玩玩沙子，踩踩水会很开心，但是应该不敢下水游泳，不过后来的事实证明小孩子的适应能力和好奇心有多么大。</p>
<h2 id="出发">出发</h2>
<p>&emsp;&emsp;杭州到厦门的动车接近7个小时，加上两头的公交等时间，基本要耗费一天的时间，而动车没有过夜的，所以从时间上来讲不太划算。我们坐的是D3131早上8：30从杭州东站开出，下午3：30左右到达厦门北站。这一天女儿早早地就起来了，我们在杭州东站吃的早饭，这样希望她可以在火车上多睡一段时间。果然，没到11：00，女儿就睡着了。小孩子虽然可以免票，但是没有座位很多时候也不方便，尤其是长途旅行的时候，毕竟三岁多的小孩已经不小了，下次出去打算给她买张儿童票了，这次枕的我们俩腿都木木的。附小家伙车上睡照一张。</p>
<p><img src="/images/crh_to.jpg" alt="动车上睡着了"></p>
<p>&emsp;&emsp;我们随行带了一个28寸的大箱子和一个背包，食物带了黄瓜、苹果、方便面和酥饼。11：00没到，两盒方便面就被女儿催着吃掉了，但是接下来的时间里黄瓜发挥了大用处，小家伙一个人就吃掉两根。回程的时候我们原也打算去菜场买点黄瓜西红柿带上，后来因时间关系放弃了，不得不说，在火车上这些东西比水果好。</p>
<h2 id="厦门北站，BRT，115路">厦门北站，BRT，115路</h2>
<p>&emsp;&emsp;厦门北站位于集美区，离厦门市中心很远，居然比机场都远，查了一下路程，差不多跟下沙到杭州市中心的距离差不多了。到达厦门是在下午3：30，一出火车站，一股热浪迎面袭来，30多度的高温，火辣辣的太阳真不是盖的。厦门北站是新修的，出站还是很快速的。</p>
<p>&emsp;&emsp;出来站，我们马上去找BRT，厦门的BRT是单独跑在高架上的，效率很高，可是北站那个上车的效率就太低了。要从厦门北站坐上B1，你得先去排队买单程票，而且一次只能买一张，当天有效，指定要去的地点，再到另一边排队等车。门口的大叔还要检查火车票，如果是电子票的，需要出示手机短信，我一直没搞明白上BRT和这个火车票有什么关系。BRT的单程票就一个塑料硬币，和一块钱差不多大。不过虽然买票有点繁琐，厦门的BRT还是很不错的，车次多，速度快，换乘方便，当然人也很多，估计以后动车改到厦门站会好一些。</p>
<p>&emsp;&emsp;B1会经过跨海大桥，女儿这时候有点困了，但还想看一下大海，跟我说，到有海的地方叫她。叫了她，看了两眼，继续睡。过跨海大桥其实离机场就不远了，已经可以看到正在降落的飞机，厦门的海水比舟山的好不少，水也比较深。</p>
<p>&emsp;&emsp;<code>东芳山庄站</code>下车，下面就是115路公交车站，与杭州相比，厦门的交通明显顺畅很多，公交车上人也要少一些，115路开了一段时间之后就上了环岛路，一路景色优美，通行迅速，我们定的旅店在黄厝，在黄厝海滨站下车。在百度地图上查询公交线路的时候，从厦门北站到黄厝海滨预计2个小时，实际上不到1个半小时，效率还是很高的。</p>
<h2 id="黄厝，青芒，沙滩，大海">黄厝，青芒，沙滩，大海</h2>
<p>&emsp;&emsp;黄厝是我们在厦门的住宿地点，它离椰风寨不远，离厦门大学几公里路，属于新近开发的家庭旅馆聚集区。由于不想曾厝垵那样在网上顶顶有名，自然物价也要平和一点，海滩上的人也少了很多，另外，这里的很多餐饮店做的都是本地居民的生意，相对于专做游客生意的要更地道一点。</p>
<p>&emsp;&emsp;我们入住的海悠悠旅店离海边很近，拐进路口几步路就到了，房间比较大，采光也不错，不过因为装修不久，还是有点味道。住的旁边就有青芒卖，立时给女儿买了一个，削好之后居然装了两盒，真够大的，6元1斤的价格也比杭州平易多了。</p>
<p>&emsp;&emsp;到酒店之后换上凉鞋短裤，乘着天还亮，带上女儿去了海边。沙滩上人不多，天气晴好，海风吹着很舒服，女儿第一次在海边玩水，还不太适应，沙子粘在脚上老让我们帮她弄掉，无语。附海边踩水照一张。</p>
<p><img src="/images/hc_beach.jpg" alt="黄厝海滩"></p>
<h2 id="金门">金门</h2>
<p>&emsp;&emsp;选择黄厝作为住宿地点的另一个原因是它离金门很近，天气好的时候直接就可以看到。下图中左侧较长的就是小金门。当年的功过是非已无从评说，但是这么近的看到它还是有点感慨，有游船可以开到更近一点的地方，但是除了观看两边的巨幅标语，也没有其他可看的了。后来据当地出租车司机说，在厦门北面的大邓，与金门是最近的，当然走私的物品也就较为丰富了，不过这一次没有时间去那里一看了。</p>
<p><img src="/images/jinmen.jpg" alt="小金门"></p>
<h2 id="脚伤">脚伤</h2>
<p>&emsp;&emsp;离海滩不远就有不少礁石，不少人会爬上去，然后一跃入水。我抱着女儿也上了其中一块。可能是旅游的新鲜感让人大意了，对滑溜溜的礁石估计不足，抱着女儿一下子摔倒了，手臂重重地装在石头上，还有女儿在怀里没有磕着。不过我就比较惨了，右臂擦破了，右脚底撕掉了一块皮肉，鲜血淋漓。</p>
<p>&emsp;&emsp;第一天就受伤让接下来的行程变得困难，匆匆回到旅店，然后出门寻找药店。在卖青芒的小伙子的指点下，顺利的找到了一个国医馆，老医生一看就给人一种很放心的感觉。说明情况，没有看伤口，给了我一盒消毒药，5块钱，便没有别的了。现在想来当时应该至少让医生检查一下，好歹开点纱布啥的，这个疏忽让我接下来几天受了不少罪。</p>
<h2 id="台湾牛肉饭，盆栽冰淇淋，海鲜粥">台湾牛肉饭，盆栽冰淇淋，海鲜粥</h2>
<p>&emsp;&emsp;路口有很多海鲜大排档，相对于舟山来说，这里的海鲜算是很便宜了。不过我们家都对海鲜兴趣不大，直接略过，向村子里面走去。黄厝村让我有一种回到滨江垃圾街的错觉，拥挤的街道，两边叫卖的摊主，街旁林林总总的小店。拐了两个弯找了一家叫做“<strong>老林家</strong>”的小餐馆，点了一份牛肉饭，一份海鲜粥，一份海鲜炒饭，总共35块钱，算是相当便宜了，而且东西还挺不错。这家店的老板很年轻，另外就是一个年轻的服务员和一个阿姨。服务员貌似是新来的，还不太熟练，不过这种慢悠悠的小店感觉挺好。在接下来的几天我们在这里吃了三顿饭，包括一份海蛎煎，不知道是材料刚采购回来的原因还是烹调技术的差异，总觉得这里的牡蛎比舟山的好了很多。</p>
<h2 id="厦门的出租车">厦门的出租车</h2>
<p>&emsp;&emsp;不知是否是被杭州糟糕的交通折磨得久了，到哪都喜欢观察一下那里的交通情况。第二天我们的目的地是鼓浪屿，原本的计划是坐那传说中的29路车，可是出来不久就看到一辆空的出租车，那便打车吧。环岛路红绿灯很少，车开得很快。厦门的出租车多是起亚，而且空车比较多，我两天打了三次车，基本没有多少等待的时间，资费比杭州便宜，从黄厝打车到厦门北站80块钱。不过厦门的出租车大都烧天然气，续航只有100多公里，如果去很远的地方的话需要考虑加气的问题。另外厦门连接各个岛的桥不少是要收费的，不过出租车一般办理了年卡，所以过桥费不用乘客负担，也是挺不错的，让我想起杭州绕城取消年卡的做法。</p>
<h2 id="第一码头，内厝奥">第一码头，内厝奥</h2>
<p>&emsp;&emsp;厦门第一码头是个挺小的码头，旁边不远就是BRT终点站，由于它太小了，以致于出租车司机都不清楚它在哪，跟旅馆老板打听才确定了它的方位。同样因为它小不知名，大部分游客都不会从那儿上鼓浪屿，也让我们省了不少排队的时间，当然去的时候船上人还是蛮多的。去内厝奥码头的船基本逢整点开，晚上没有班次，票价8元。船是上下两层的，上到上层的话需要加1元，我们当然是到上面看风景了。</p>
<p><img src="/images/first_dock.jpg" alt="驶离第一码头"><br><img src="/images/boat_to.jpg" alt="第一码头往内厝奥的船"><br><img src="/images/to_nca.jpg" alt="到达鼓浪屿内厝奥码头"></p>
<h2 id="鼓浪屿">鼓浪屿</h2>
<p>&emsp;&emsp;内厝奥同样是鼓浪屿上人相对少很多的一个码头，出来之后沿着海边走走，游客不多，店铺也不多。傍晚在海滩上漫步，或者下水，晚上静静听着海浪声，感觉真心不错。比起龙头路那边的喧嚣和热闹，这边更适合放松自己的身心。</p>
<h3 id="七里香舍">七里香舍</h3>
<p>&emsp;&emsp;预定的七里香舍酒店就在海滩边，隔壁就是别墅酒店，700多一晚的海景房真心不错，一个大阳台，楼下郁郁葱葱的植物，几条看门的土狗，还有一个金鱼池。酒店主人貌似是个佛教徒，大堂里面有很多的佛教念珠之类的物品出售，旁边的咖啡厅供应三餐，早餐赠送两人的。但是酒店的晚餐就有点贵了，比泉州路那边的咖啡馆都贵，另外就是早餐时候的烤面包机太少了，我们等不及直接就吃凉的了。</p>
<p>&emsp;&emsp;还有一个有趣的现象，酒店的前台每次一接电话总是一口地道伦敦腔：“May I help you sir?”，而与之交谈我怀疑他是不是来自台湾，这个酒店就跟厦门的很多生活状态一样，悠闲，平淡，自在。</p>
<h3 id="老建筑">老建筑</h3>
<p>&emsp;&emsp;沿鼓声路往上走，翻过花鸟元园，进入泉州路，两边就能看到很多的老建筑了。有人说鼓浪屿是万国建筑博物馆，看来所言非虚。这里坐落着很多各式各样的民国时期的小洋楼，一般都带上一个小院子。而与许多其他景点不同的是，这里的大部分建筑现在还在使用中，从而多了点生活气息，显得更为亲近。附上随拍的一张小楼照片，从照片上可以看到<code>黄赐敏故居</code>字样，网上查了一下，这个楼叫作<code>金瓜楼</code>，建成于1922年，为旅菲华侨<strong>黄赐敏先生</strong>1924年购得。</p>
<p><img src="/images/gly_building.jpg" alt="鼓浪屿上的建筑"></p>
<h3 id="龙头路">龙头路</h3>
<p>&emsp;&emsp;沿着泉州路继续往前走，接近龙头路的时候街上的行人已经是熙熙攘攘了。龙头路在网上很有名，这里坐落了很多特色的小吃店铺，和一些有特色的工艺品点，但是严格来说，和其它的许多步行街相比，没有什么特色，这样的景色在苏州观前街这样的地方也都类似。</p>
<h3 id="黄金香，张三疯">黄金香，张三疯</h3>
<p>&emsp;&emsp;来之前有同事让帮忙在鼓浪屿上带一点猪肉脯回去，所以<strong>黄金香</strong>是必须要去的。与传说中一样，龙头路95号上很小的店面，大块的猪肉脯随便试吃，100块钱8包，送一个实用的旅行包。不过可能是天气太热的缘故，并没有太多的人在买，我们挑了4包猪肉脯，4包牛肉干肉松之类的东西就离开了。没有什么目的，也没有遵循网上的攻略，一路上走走停停，先后买了<strong>第七铺</strong>的牛轧糖，张三疯的奶茶，还有香草冰淇淋。牛轧糖和奶茶都不错，特别是那个奶茶，有茶叶淡淡的苦味，不过喝起来非常顺口，我们全家都对它赞不绝口。但是臭豆腐就很一般了，不如苏州山塘街的，也不如绍兴臭豆腐。</p>
<h3 id="厦门的高楼">厦门的高楼</h3>
<p>&emsp;&emsp;沿着海边慢慢溜达，脚伤还是严重影响了我的行动，我们走得很慢，鼓浪屿与厦门本岛最近的地方估计只有几百米，海边有不少兜售小东西的商贩，还有一个吹笛子的大叔，一曲《上海滩》听着荡气回肠。从鼓浪屿向厦门看去，可以看到一座很高的楼，怀疑是不是传说中的厦门国际中心。</p>
<p><img src="/images/top_building.jpg" alt="高楼"></p>
<h3 id="内厝奥的海滩">内厝奥的海滩</h3>
<p>&emsp;&emsp;走着走着女儿睡着了，而天气也实在太热了，我们便返回酒店休息，一直到5：00多出来去海边玩沙子。内厝奥的海滩人不多，也比较干净，可能是水比较深的缘故，这里的海水还算清澈。女儿带着小桶等一堆玩沙的东西来到了沙滩上，边上有一些人在游泳，远处能看到大船经过。夕阳下，吹着海风，携妻带女在沙滩上散步，感觉真好！</p>
<p><img src="/images/play_sand.jpg" alt="玩沙子"><br><img src="/images/walk_on_gly_beach.jpg" alt="海边漫步"><br><img src="/images/huge_ship.jpg" alt="大船"></p>
<h2 id="再回黄厝">再回黄厝</h2>
<p>&emsp;&emsp;晚饭直接在酒店咖啡厅解决了，第二天的早饭也一样，我们睡到自然醒，然后不紧不慢地吃早饭，收拾行李，退房。等走到内厝奥码头的时候，刚好有一艘返回钢琴码头的船要开。这次船上人很少，上到二层也没有额外收费。</p>
<p>&emsp;&emsp;打车回黄厝，还是住在原来的房间里。先去外面买回一堆吃的，然后吃东西，午休，避暑。</p>
<p>&emsp;&emsp;帮女儿换上泳衣，带上泳圈，涂上防晒霜，下海啦，虽然我的脚一下水就疼得厉害，但是好歹不虚此行吧。女儿刚开始下水的时候身体还有点僵硬，慢慢就放开了，小脚在水里扑腾着，小手划着，很有那么点意思。</p>
<p><img src="/images/swim_1.jpg" alt="游泳1"><br><img src="/images/swim_2.jpg" alt="游泳2"></p>
<h2 id="归杭">归杭</h2>
<p>&emsp;&emsp;晚上仍然去<strong>老林家</strong>吃饭，出来又去超市里买了三个芒果带回家，这里的芒果大部分不到6元1斤，比杭州便宜了很多，物流成本很高啊！</p>
<p>&emsp;&emsp;路边有荔枝在卖，3元1斤，老婆买了十几块钱，一大袋子，可就这一大袋子，我几乎没吃到，都被她们娘儿俩解决了。</p>
<p>&emsp;&emsp;第二天睡到自然醒，老林家吃早饭，尝了一下海蛎煎，很赞！打车去厦门北站，80块钱，40多分钟就到了，厦门的交通真好！D3206返杭，旅程结束，回归工作啦！</p>
]]></content>
    
    
      <category term="旅行" scheme="http://feiyuw.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="旅行" scheme="http://feiyuw.github.io/categories/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
</feed>
